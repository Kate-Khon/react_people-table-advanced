{"version":3,"sources":["components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/CenturyFilter.tsx","components/NameFilter.tsx","components/PeopleFilters.tsx","components/PersonLink.tsx","components/SortLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/NotFoundPage.tsx","App.tsx","api.ts","index.tsx"],"names":["HomePage","className","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","CenturyFilter","centuries","getAll","map","century","classNames","includes","filter","c","length","NameFilter","setSearchParams","query","get","type","placeholder","onChange","event","target","PeopleFilters","sex","PersonLink","person","useLocation","pathname","slug","name","SortLink","field","sortField","isReversed","sort","order","PeopleTable","people","useParams","born","died","mother","motherName","father","fatherName","PeoplePage","visiblePeople","Math","ceil","lowerQuery","toLowerCase","join","a","b","localeCompare","reverse","NotFoundPage","library","add","fas","getActiveClasses","status","isActive","App","location","useState","setPeople","useEffect","fetch","then","res","json","peopleFromServer","preparedPeople","p","assign","find","m","f","path","element","index","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c1eb24b.chunk.js","sourcesContent":["export const HomePage = () => (\n  <>\n    <h1 className=\"subtitle is-3\">Home page</h1>\n  </>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(currentParams.toString());\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => newParams.append(key, part));\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{ search: getSearchWith(searchParams, params) }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\nexport const CenturyFilter = () => {\n  const [searchParams] = useSearchParams();\n  const centuries = searchParams.getAll('centuries');\n\n  return (\n    <div className=\"level is-flex-grow-1 is-mobile\">\n      <div className=\"level-left\">\n        {['16', '17', '18', '19', '20'].map(century => (\n          <SearchLink\n            key={century}\n            className={classNames(\n              'button mr-2',\n              { 'has-background-violet-light': centuries.includes(century) },\n            )}\n            params={{\n              centuries: centuries.includes(century)\n                ? centuries.filter(c => c !== century)\n                : [...centuries, century],\n            }}\n          >\n            {century}\n          </SearchLink>\n        ))}\n      </div>\n\n      <div className=\"level-right ml-4\">\n        <SearchLink\n          params={{ centuries: null }}\n          className={classNames(\n            'button has-background-danger-light',\n            { 'has-text-danger': centuries.length > 0 },\n          )}\n        >\n          All\n        </SearchLink>\n      </div>\n    </div>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const NameFilter = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n\n  return (\n    <p className=\"control has-icons-left\">\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search\"\n        value={query}\n        onChange={event => setSearchParams(\n          getSearchWith(searchParams, {\n            query: event.target.value || null,\n          }),\n        )}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-search\" aria-hidden=\"true\" />\n      </span>\n    </p>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { CenturyFilter } from './CenturyFilter';\nimport { NameFilter } from './NameFilter';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get('sex');\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">\n        Filters\n      </p>\n\n      <p className=\"panel-tabs\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames('link--small', { 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames('link--small', { 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames('link--small', { 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <NameFilter />\n      </div>\n\n      <div className=\"panel-block\">\n        <CenturyFilter />\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"\n            button\n            is-danger-light\n            has-background-violet-light\n            is-outlined\n            is-fullwidth\n          \"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search,\n      }}\n      className={classNames({\n        'has-text-danger': person.sex === 'f',\n        'has-text-link': person.sex === 'm',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  field: string;\n};\n\nexport const SortLink: React.FC<Props> = ({ field }) => {\n  const [searchParams] = useSearchParams();\n\n  const sortField = searchParams.get('sort') || '';\n  const isReversed = searchParams.get('order') === 'desc';\n\n  const params = {\n    sort: (field === sortField && isReversed) ? null : field,\n    order: (field === sortField && !isReversed) ? 'desc' : null,\n  };\n\n  return (\n    <SearchLink params={params}>\n      <span className=\"icon\">\n        <i\n          className={classNames('fas', {\n            'fa-sort': sortField !== field,\n            'fa-sort-up': sortField === field && !isReversed,\n            'fa-sort-down': sortField === field && isReversed,\n          })}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\nimport { SortLink } from './SortLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n\n  if (people.length === 0) {\n    return (\n      <p>There are no people matching the current search criteria</p>\n    );\n  }\n\n  return (\n    <table\n      className=\"\n        PeopleTable\n        people_table\n        table\n        is-bordered\n      \"\n    >\n\n      <thead className=\"thead\">\n        <th className=\"th--name\">\n          name\n          <SortLink field=\"name\" />\n        </th>\n        <th className=\"th--details\">\n          sex\n          <SortLink field=\"sex\" />\n        </th>\n        <th className=\"th--details\">\n          born\n          <SortLink field=\"born\" />\n        </th>\n        <th className=\"th--details\">\n          died\n          <SortLink field=\"died\" />\n        </th>\n        <th className=\"th--name\">mother</th>\n        <th className=\"th--name\">father</th>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            className={classNames({\n              'has-background-violet-light': person.slug === slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother ? (\n                <PersonLink person={person.mother} />\n              ) : person.motherName}\n            </td>\n            <td>\n              {person.father ? (\n                <PersonLink person={person.father} />\n              ) : person.fatherName}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n\n    </table>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types/Person';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeoplePage: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  let visiblePeople = [...people];\n\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n  const sortField = searchParams.get('sort');\n  const isReversed = searchParams.get('order') === 'desc';\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length > 0) {\n    visiblePeople = visiblePeople.filter(person => (\n      centuries.includes(Math.ceil(person.born / 100).toString())\n    ));\n  }\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    visiblePeople = visiblePeople.filter(person => (\n      [person.name, person.motherName || '', person.fatherName || '']\n        .join('\\n')\n        .toLowerCase()\n        .includes(lowerQuery)\n    ));\n  }\n\n  if (sortField) {\n    visiblePeople.sort((a, b) => {\n      switch (sortField) {\n        case 'name':\n        case 'sex':\n          return a[sortField].localeCompare(b[sortField]);\n\n        case 'born':\n        case 'died':\n          return a[sortField] - b[sortField];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visiblePeople.reverse();\n  }\n\n  return (\n    <>\n      <h1 className=\"subtitle is-3\">People page</h1>\n      <PeopleFilters />\n      <PeopleTable people={visiblePeople} />\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"subtitle is-3\">Page not found</h1>\n);\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\n\nimport './App.scss';\nimport { useState, useEffect } from 'react';\nimport {\n  Routes,\n  Route,\n  NavLink,\n  Navigate,\n  useLocation,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getPeople } from './api';\n\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Person } from './types/Person';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nlibrary.add(fas);\n\ntype Status = { isActive: boolean };\n\nconst getActiveClasses = (status: Status) => classNames(\n  { 'link--selected': status.isActive },\n);\n\nexport const App = () => {\n  const location = useLocation();\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople()\n      .then(peopleFromServer => {\n        const preparedPeople = peopleFromServer.map(p => ({ ...p }));\n\n        preparedPeople.forEach(person => {\n          Object.assign(person, {\n            mother: preparedPeople.find(m => m.name === person.motherName)\n            || null,\n            father: preparedPeople.find(f => f.name === person.fatherName)\n            || null,\n          });\n        });\n\n        setPeople(preparedPeople);\n      });\n  }, []);\n\n  return (\n    <div className=\"container box\">\n      <div className=\"App\">\n        <h1 className=\"title is-2\">People table</h1>\n      </div>\n\n      <nav className=\"nav\">\n        <NavLink to=\"/\" className={getActiveClasses}>\n          <p className=\"link\">Home page</p>\n        </NavLink>\n\n        <NavLink\n          to={{\n            pathname: 'people',\n            search: location.search,\n          }}\n          className={getActiveClasses}\n        >\n          <p className=\"link\">People page</p>\n        </NavLink>\n      </nav>\n\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/people\">\n          <Route index element={<PeoplePage people={people} />} />\n          <Route path=\":slug\" element={<PeoplePage people={people} />} />\n        </Route>\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Routes>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\nconst URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport function getPeople(): Promise<Person[]> {\n  return fetch(URL)\n    .then(res => res.json());\n}\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}